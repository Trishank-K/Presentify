datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String    @id @default(uuid())
  name               String?
  email              String    @unique
  profileImage       String?
  subscription       Boolean?  @default(false)
  lemonSqueezyApiKey String?
  storeId            String?
  password           String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Projects  Project[] @relation("OwnedProjects")
  Purchases Project[] @relation("PurchasedProjects")
}

model Project {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  slides    Json?
  userId    String  
  outlines  String[]
  isDeleted Boolean  @default(false)
  variantId String?
  thumbnail String?
  themeName String   @default("light")

  User       User   @relation("OwnedProjects", fields: [userId], references: [id])
  Purchasers User[] @relation("PurchasedProjects")
}

model Account {
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String  
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
